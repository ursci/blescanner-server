name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ['*']

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: rustup update stable && rustup default stable
    - run: rustup component add rustfmt
    - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: rustup update stable && rustup default stable
    - run: rustup component add clippy
    - run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_PROFILE_DEV_DEBUG: 1
      CARGO_PROFILE_TEST_DEBUG: 1
      CARGO_INCREMENTAL: 0
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          rust: stable
          other: i686-unknown-linux-gnu
        - os: ubuntu-latest
          rust: beta
          other: i686-unknown-linux-gnu
        - os: ubuntu-latest
          rust: nightly
          other: i686-unknown-linux-gnu
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          components: rustfmt
          targets: wasm32-unknown-unknown
      - uses: actions/checkout@master
      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install libudev-dev zlib1g-dev alsa libasound2-dev
      - name: Build
        run: cargo build --verbose
      - name: Install Diesel CLI
        run: cargo install diesel_cli --no-default-features --features postgres
      - name: Setup diesel
        env:
         DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: diesel setup && diesel setup --database-url ${{ secrets.TEST_DATABASE_URL }}
      - name: Run tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          touch .env
          echo TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }} > .env
          cargo test --verbose

  success:
    needs: [rustfmt, clippy, test]
    runs-on: ubuntu-latest
    if: "success() && github.event_name == 'push'"
    steps:
    - run: echo ok
  failure:
    needs: [rustfmt, clippy, test]
    runs-on: ubuntu-latest
    if: "!success() && github.event_name == 'push'"
    steps:
    - run: exit 1
